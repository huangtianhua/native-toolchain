diff --git a/thirdparty/build-definitions.sh b/thirdparty/build-definitions.sh
index 4df64f678..6b34e39f4 100644
--- a/thirdparty/build-definitions.sh
+++ b/thirdparty/build-definitions.sh
@@ -566,6 +566,9 @@ build_bitshuffle() {
   # do this trick on Linux.
   if [ -n "$OS_LINUX" ]; then
     arches="default avx2"
+    if [[ "$ARCH_NAME" == "aarch64" ]]; then
+      arches="default"
+    fi
   else
     arches="default"
   fi
diff --git a/thirdparty/download-thirdparty.sh b/thirdparty/download-thirdparty.sh
index dd5167846..f8a7d9c3c 100755
--- a/thirdparty/download-thirdparty.sh
+++ b/thirdparty/download-thirdparty.sh
@@ -297,12 +297,13 @@ fetch_and_patch \
  $CURL_PATCHLEVEL \
  "autoreconf -fvi"
 
-CRCUTIL_PATCHLEVEL=1
+CRCUTIL_PATCHLEVEL=2
 fetch_and_patch \
  crcutil-${CRCUTIL_VERSION}.tar.gz \
  $CRCUTIL_SOURCE \
  $CRCUTIL_PATCHLEVEL \
- "patch -p0 < $TP_DIR/patches/crcutil-fix-libtoolize-on-osx.patch"
+ "patch -p0 < $TP_DIR/patches/crcutil-fix-libtoolize-on-osx.patch" \
+ "patch -p0 < $TP_DIR/patches/crcutil-fix-on-aarch64.patch"
 
 LIBUNWIND_PATCHLEVEL=1
 fetch_and_patch \
diff --git a/thirdparty/patches/crcutil-fix-on-aarch64.patch b/thirdparty/patches/crcutil-fix-on-aarch64.patch
new file mode 100644
index 000000000..fcf1bba6a
--- /dev/null
+++ b/thirdparty/patches/crcutil-fix-on-aarch64.patch
@@ -0,0 +1,104 @@
+--- autogen.sh
++++ autogen.sh
+@@ -91,6 +91,10 @@ elif [[ "$IS_CLANG" = "1" ]]; then
+   crcutil_flags="${crcutil_flags} -msse4.2"
+ fi
+ 
++if [[ "$ARCH_NAME" == "aarch64" ]]; then
++  crcutil_flags="-DCRCUTIL_USE_MM_CRC32=1 -Wall -march=armv8-a -Icode -Iexamples -Itests -O3"
++fi
++
+ echo>>${target} "AM_CXXFLAGS=${crcutil_flags}"
+ echo>>${target} 'AM_CFLAGS=$(AM_CXXFLAGS)'
+ 
+--- code/crc32c_sse4.cc
++++ code/crc32c_sse4.cc
+@@ -18,7 +18,7 @@
+ 
+ #include "crc32c_sse4.h"
+ 
+-#if HAVE_I386 || HAVE_AMD64
++#if HAVE_I386 || HAVE_AMD64 || HAVE_AARCH64
+ 
+ namespace crcutil {
+ 
+@@ -363,4 +363,4 @@ void RollingCrc32cSSE4::Init(const Crc32cSSE4 &crc,
+ 
+ }  // namespace crcutil
+ 
+-#endif  // HAVE_I386 || HAVE_AMD64
++#endif  // HAVE_I386 || HAVE_AMD64 || HAVE_AARCH64
+--- code/crc32c_sse4.h
++++ code/crc32c_sse4.h
+@@ -22,7 +22,7 @@
+ #include "gf_util.h"              // base types, gf_util class, etc.
+ #include "crc32c_sse4_intrin.h"   // _mm_crc32_u* intrinsics
+ 
+-#if HAVE_I386 || HAVE_AMD64
++#if HAVE_I386 || HAVE_AMD64 || HAVE_AARCH64
+ 
+ #if CRCUTIL_USE_MM_CRC32
+ 
+@@ -247,6 +247,6 @@ class RollingCrc32cSSE4 {
+ 
+ }  // namespace crcutil
+ 
+-#endif  // HAVE_I386 || HAVE_AMD64
++#endif  // HAVE_I386 || HAVE_AMD64 || HAVE_AARCH64
+ 
+ #endif  // CRCUTIL_CRC32C_SSE4_H_
+--- code/crc32c_sse4_intrin.h
++++ code/crc32c_sse4_intrin.h
+@@ -20,7 +20,7 @@
+ #include "platform.h"
+ #include "base_types.h"
+ 
+-#if CRCUTIL_USE_MM_CRC32 && (HAVE_I386 || HAVE_AMD64)
++#if CRCUTIL_USE_MM_CRC32 && (HAVE_I386 || HAVE_AMD64 || HAVE_AARCH64)
+ 
+ #if defined(_MSC_VER) || defined(__SSE4_2__)
+ 
+@@ -94,6 +94,6 @@ __forceinline uint32 _mm_crc32_u8(uint32 crc, uint8 value) {
+ 
+ #endif
+ 
+-#endif  // CRCUTIL_USE_MM_CRC32 && (HAVE_I386 || HAVE_AMD64)
++#endif  // CRCUTIL_USE_MM_CRC32 && (HAVE_I386 || HAVE_AMD64 || HAVE_AARCH64)
+ 
+ #endif  // CRCUTIL_CRC32C_SSE4_INTRIN_H_
+--- code/platform.h
++++ code/platform.h
+@@ -45,6 +45,13 @@
+ #endif  // defined(__amd64__) || defined(_M_AMD64)
+ #endif  // defined(HAVE_AMD64)
+ 
++#if !defined(HAVE_AARCH64)
++#if defined(__aarch64__)
++#define HAVE_AARCH64 1
++#else
++#define HAVE_AARCH64 0
++#endif  // defined(__aarch64__)
++#endif  // defined(HAVE_AARCH64)
+ 
+ #if HAVE_AMD64 || HAVE_I386
+ #if defined(_MSC_VER)
+--- examples/interface.cc
++++ examples/interface.cc
+@@ -268,7 +268,7 @@ CRC *CRC::Create(UINT64 poly_lo,
+ #endif  // !HAVE_SSE2
+   }
+ 
+-#if CRCUTIL_USE_MM_CRC32 && (HAVE_I386 || HAVE_AMD64)
++#if CRCUTIL_USE_MM_CRC32 && (HAVE_I386 || HAVE_AMD64 || HAVE_AARCH64)
+   if (use_sse4_2 &&
+       degree == Crc32cSSE4::FixedDegree() &&
+       poly_lo == Crc32cSSE4::FixedGeneratingPolynomial() &&
+@@ -284,7 +284,7 @@ CRC *CRC::Create(UINT64 poly_lo,
+         static_cast<size_t>(roll_length),
+         allocated_memory);
+   }
+-#endif  // CRCUTIL_USE_MM_CRC32 && (HAVE_I386 || HAVE_AMD64)
++#endif  // CRCUTIL_USE_MM_CRC32 && (HAVE_I386 || HAVE_AMD64 || HAVE_AARCH64)
+ 
+   if (poly_hi != 0 || (degree != 64 && (poly_lo >> degree) != 0)) {
+     return NULL;
